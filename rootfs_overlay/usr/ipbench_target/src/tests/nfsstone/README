NFSSTONE
========
    Nfsstone is a benchmark that generates a load on a server that exports a
network file system. The original benchmark was written by Barry Shein, Mike
Callahan and Paul Woodbury, who credit Howard Eskin, Chris Jolly and Scott
Palmer for thier earlier inspirational work (see nfsstones.ms).

    The file system being benchmarked is tested independent of the underlying
network configuration and protocols, this allows a variety of file systems and
network combinations to be benchmarks with a single product. This means that the
benchmark targets a variety of network file system or even a local file system
if one would like to test its performance.

Whats Different
===============
    Modifications to the original Nfsstone code base is minimal and was required
to allow one objective, many clients generating load on a single server. Thus
there is no change to the original work load generated by a single client, all
that has changed here is the association of a client hostname to the top level
load directory. This allows many clients to concurrently generate load without
hitting stomping on each others work files.

How The Benchmarks Runs
=======================
    Requirements:
        - The file server must export and allow the load clients to connect.
        - The clients must have the test file system locally mount before the
          benchmark is started, this allows us to run in users space without the
          need for any privileged system calls like 'mount'.
        - The test file system must be mounted read write for the users
          initiating the benchmark.
          - The simplest method is to add an entry to '/etc/fstab', so all users
            can u/mount the file system.
    Running:
        - Start the file server daemon on the target.
        - Setup the 'src/tests/nfsstone/nfsstone-config.xml' file so all clients
	  are listed. The 'target', and 'port' arguments are not required by
          this benchmark. The 'args' argument is:
          - args="<nfs> <lockfile> [top_dirs] [sub_dirs]"
            nfs:      The locally mount target file system.
            lockfile: The child synchronisation lock file (best to be created on
                      a local file system to avoid clashes).
            top_dirs: The number of top level directories to create for the
                      workload (default 1).
            sub_dirs: The number of sub-directories to create for the workload
	              (default 3).
        - The total workload is calculated by (top_dirs*sub_dirs)*no.operations.

TODO

   - Add Controller features to the suite.
   - Allow ipbench to start and gather statistics on the target server. As an
     example 'lockmeter'.
